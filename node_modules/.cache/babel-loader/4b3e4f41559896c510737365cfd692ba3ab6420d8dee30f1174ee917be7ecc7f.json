{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ijanv\\\\hangman-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//Imports the Necessary components \nimport React, { useState, useEffect } from 'react'; /*UseState to keep track ,and useEffect to fetch the word*/\nimport GameBoard from './GameBoard'; //The word with guessed letters\nimport Keyboard from './Keyboard'; //The clickable keyboard for user input\nimport HangmanImage from './HangmanImage'; //The hangman image based on incorrect guesses\nimport GameStatus from './GameStatus'; //The current game status (win/loss)\nimport Help from './Help'; //The help instructions\nimport './Styles/App.css'; //The stylesheet for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State variables that manages the game status\n  const [word, setWord] = useState(''); // The word to guess, initialized as an empty string\n  const [guessedLetters, setGuessedLetters] = useState([]); // Array that stores the guessed letters\n  const [incorrectGuesses, setIncorrectGuesses] = useState(0); // Tracks the number of incorrect guesses\n  const [gameStatus, setGameStatus] = useState('playing'); // Tracks the game status: 'playing', 'won', 'lost'\n  const [showHelp, setShowHelp] = useState(false); // Controls the visibility of the help section\n\n  const maxLives = 11; // Maximum allowed incorrect guesses before the game is lost\n\n  // Fetches a random word from dictionary.txt\n  const fetchRandomWord = () => {\n    fetch('/dictionary.txt').then(response => response.text()) // Fetches the content of dictionary.txt\n    .then(text => {\n      const words = text.split('\\n').map(word => word.trim()); // Splits the text into words and trims any extra spaces\n      setWord(words[Math.floor(Math.random() * words.length)]); // Sets a random word from the list\n    });\n  };\n\n  // Loads a random word when the component mounts\n  useEffect(() => {\n    fetchRandomWord(); // Initial fetch of the random word\n  }, []); // Empty dependency array ensures this only runs once when the component mounts\n\n  // Function that handles a letter guess\n  const handleGuess = letter => {\n    const normalizedLetter = letter.toLowerCase(); // Normalizes the guessed letter to lowercase for consistency\n\n    // Skips the guess if the letter has already been guessed or the game is not in 'playing' state\n    if (guessedLetters.includes(normalizedLetter) || gameStatus !== 'playing') return;\n\n    // Adds the guessed letter to the list of guessed letters\n    const newGuessedLetters = [...guessedLetters, normalizedLetter];\n    setGuessedLetters(newGuessedLetters);\n\n    // Checks if the guessed letter is in the word\n    if (!word.toLowerCase().includes(normalizedLetter)) {\n      const newIncorrectGuesses = incorrectGuesses + 1; // Increments the incorrect guess count\n      setIncorrectGuesses(newIncorrectGuesses);\n\n      // If the max number of incorrect guesses is reached, sets the game status to 'lost'\n      if (newIncorrectGuesses === maxLives) {\n        setGameStatus('lost');\n      }\n    } else {\n      // Checks if all letters in the word have been guessed correctly\n      const allLettersGuessed = word.toLowerCase().split('').every(char => newGuessedLetters.includes(char.toLowerCase()) // Normalizes each letter to lowercase for comparison\n      );\n      if (allLettersGuessed) {\n        setGameStatus('won'); // If all letters are guessed, set the game status to 'won'\n      }\n    }\n  };\n\n  // Function that restarts the game\n  const restartGame = () => {\n    setGuessedLetters([]); // Resets guessed letters\n    setIncorrectGuesses(0); // Resets incorrect guesses\n    setGameStatus('playing'); // Sets the game status back to 'playing'\n    setShowHelp(false); // Hides the help section upon restarting the game\n\n    fetchRandomWord(); // Fetches a new random word when restarting\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hangman\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(HangmanImage, {\n      incorrectGuesses: incorrectGuesses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(GameBoard, {\n      word: word,\n      guessedLetters: guessedLetters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Keyboard, {\n      guessedLetters: guessedLetters,\n      onGuess: handleGuess,\n      restartGame: restartGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(GameStatus, {\n      gameStatus: gameStatus,\n      restartGame: restartGame,\n      incorrectGuesses: incorrectGuesses,\n      maxLives: maxLives,\n      word: word // Passes the word to GameStatus component for display\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"help-button\",\n      onClick: () => setShowHelp(!showHelp),\n      children: [showHelp ? 'Hide Help' : 'Show Help', \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), showHelp && /*#__PURE__*/_jsxDEV(Help, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 20\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n//Exports the App components\n_s(App, \"Qwfe3HmHZ9xcj98rufmJeV6STZE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameBoard","Keyboard","HangmanImage","GameStatus","Help","jsxDEV","_jsxDEV","App","_s","word","setWord","guessedLetters","setGuessedLetters","incorrectGuesses","setIncorrectGuesses","gameStatus","setGameStatus","showHelp","setShowHelp","maxLives","fetchRandomWord","fetch","then","response","text","words","split","map","trim","Math","floor","random","length","handleGuess","letter","normalizedLetter","toLowerCase","includes","newGuessedLetters","newIncorrectGuesses","allLettersGuessed","every","char","restartGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onGuess","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ijanv/hangman-app/src/App.js"],"sourcesContent":["//Imports the Necessary components \nimport React, { useState, useEffect } from 'react';/*UseState to keep track ,and useEffect to fetch the word*/\nimport GameBoard from './GameBoard'; //The word with guessed letters\nimport Keyboard from './Keyboard'; //The clickable keyboard for user input\nimport HangmanImage from './HangmanImage'; //The hangman image based on incorrect guesses\nimport GameStatus from './GameStatus'; //The current game status (win/loss)\nimport Help from './Help'; //The help instructions\nimport './Styles/App.css'; //The stylesheet for styling\n\nconst App = () => {\n  // State variables that manages the game status\n  const [word, setWord] = useState(''); // The word to guess, initialized as an empty string\n  const [guessedLetters, setGuessedLetters] = useState([]); // Array that stores the guessed letters\n  const [incorrectGuesses, setIncorrectGuesses] = useState(0); // Tracks the number of incorrect guesses\n  const [gameStatus, setGameStatus] = useState('playing'); // Tracks the game status: 'playing', 'won', 'lost'\n  const [showHelp, setShowHelp] = useState(false); // Controls the visibility of the help section\n\n  const maxLives = 11; // Maximum allowed incorrect guesses before the game is lost\n\n  // Fetches a random word from dictionary.txt\n  const fetchRandomWord = () => {\n    fetch('/dictionary.txt')\n      .then((response) => response.text()) // Fetches the content of dictionary.txt\n      .then((text) => {\n        const words = text.split('\\n').map((word) => word.trim()); // Splits the text into words and trims any extra spaces\n        setWord(words[Math.floor(Math.random() * words.length)]); // Sets a random word from the list\n      });\n  };\n\n  // Loads a random word when the component mounts\n  useEffect(() => {\n    fetchRandomWord(); // Initial fetch of the random word\n  }, []); // Empty dependency array ensures this only runs once when the component mounts\n\n  // Function that handles a letter guess\n  const handleGuess = (letter) => {\n    const normalizedLetter = letter.toLowerCase(); // Normalizes the guessed letter to lowercase for consistency\n  \n    // Skips the guess if the letter has already been guessed or the game is not in 'playing' state\n    if (guessedLetters.includes(normalizedLetter) || gameStatus !== 'playing') return;\n  \n    // Adds the guessed letter to the list of guessed letters\n    const newGuessedLetters = [...guessedLetters, normalizedLetter];\n    setGuessedLetters(newGuessedLetters);\n  \n    // Checks if the guessed letter is in the word\n    if (!word.toLowerCase().includes(normalizedLetter)) {\n      const newIncorrectGuesses = incorrectGuesses + 1; // Increments the incorrect guess count\n      setIncorrectGuesses(newIncorrectGuesses);\n  \n      // If the max number of incorrect guesses is reached, sets the game status to 'lost'\n      if (newIncorrectGuesses === maxLives) {\n        setGameStatus('lost');\n      }\n    } else {\n      // Checks if all letters in the word have been guessed correctly\n      const allLettersGuessed = word.toLowerCase().split('').every((char) =>\n        newGuessedLetters.includes(char.toLowerCase()) // Normalizes each letter to lowercase for comparison\n      );\n      if (allLettersGuessed) {\n        setGameStatus('won'); // If all letters are guessed, set the game status to 'won'\n      }\n    }\n  };\n\n  // Function that restarts the game\n  const restartGame = () => {\n    setGuessedLetters([]); // Resets guessed letters\n    setIncorrectGuesses(0); // Resets incorrect guesses\n    setGameStatus('playing'); // Sets the game status back to 'playing'\n    setShowHelp(false); // Hides the help section upon restarting the game\n\n    fetchRandomWord(); // Fetches a new random word when restarting\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Hangman</h1> {/* Displays the main game title */}\n      <HangmanImage incorrectGuesses={incorrectGuesses} /> {/* Displays the hangman image based on incorrect guesses */}\n      <GameBoard word={word} guessedLetters={guessedLetters} /> {/* Shows the word with guessed letters */}\n      <Keyboard guessedLetters={guessedLetters} onGuess={handleGuess} restartGame={restartGame} /> {/* Keyboard for letter guesses */}\n\n      {/* Displays game status (win/loss) and a restart button */}\n      <GameStatus\n        gameStatus={gameStatus}\n        restartGame={restartGame}\n        incorrectGuesses={incorrectGuesses}\n        maxLives={maxLives}\n        word={word} // Passes the word to GameStatus component for display\n      />\n      {/* Help button that toggles visibility of the help section */}\n      <button className=\"help-button\" onClick={() => setShowHelp(!showHelp)}>\n        {showHelp ? 'Hide Help' : 'Show Help'} {/* Toggle button text based on the current help visibility */}\n      </button>\n      {showHelp && <Help />} {/* Conditionally renders the Help component if 'showHelp' is true */}\n    </div>\n  );\n};\n//Exports the App components\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}