{"ast":null,"code":"// Imports React and useEffect hook for side effects\nimport React,{useEffect}from'react';// Defines the Keyboard component, which receives guessedLetters, onGuess, and restartGame as props\nimport{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const Keyboard=_ref=>{let{guessedLetters,onGuess,restartGame}=_ref;// Defines an array of uppercase letters for the keyboard\nconst letters='QWERTYUIOPASDFGHJKLZXCVBNM'.split('');// Defines rows based on a QWERTY keyboard layout\nconst rows=['QWERTYUIOP',// First row of keys\n'ASDFGHJKL',// Second row of keys\n'ZXCVBNM'// Third row of keys\n];// Handles key click: Normalizes letter and triggers onGuess if the letter hasn't been guessed\nconst handleKeyClick=letter=>{const normalizedLetter=letter.toLowerCase();// Normalizes the letter to lowercase\nif(!guessedLetters.includes(normalizedLetter)){onGuess(normalizedLetter);// Passes the normalized letter to the onGuess function\n}};// Handles key press event (triggered by physical keypress)\nconst handleKeyPress=event=>{const pressedKey=event.key.toUpperCase();// Converts pressed key to uppercase\nif(letters.includes(pressedKey)){handleKeyClick(pressedKey);// Calls handleKeyClick if the key is part of the defined letters\n}};//Event listener for keypress\nuseEffect(()=>{window.addEventListener('keydown',handleKeyPress);// Adds event listener for keypress\nreturn()=>{window.removeEventListener('keydown',handleKeyPress);// Cleans up event listener on unmount\n};},[guessedLetters]);// Adds guessedLetters as dependency to re-run effect when guessedLetters changes\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"keyboard\",children:[rows.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"keyboard-row\",children:row.split('').map(letter=>{const normalizedLetter=letter.toLowerCase();// Normalizes letter to lowercase for comparison\nconst isGuessed=guessedLetters.includes(normalizedLetter);// Checks if the letter is guessed\nreturn/*#__PURE__*/_jsxs(\"button\",{// Uses normalized letter as key for uniqueness\nclassName:\"key \".concat(isGuessed?'disabled':'')// Adds 'disabled' class if the letter is guessed\n,onClick:()=>handleKeyClick(letter)// Handles click event for the key\n,disabled:isGuessed// Disables the button if the letter has been guessed\n,children:[letter,\" \"]},normalizedLetter);})},rowIndex)),/*#__PURE__*/_jsx(\"div\",{className:\"keyboard-row row-special\",children:/*#__PURE__*/_jsx(\"button\",{className:\"key key-reset\"// Applies reset key class\n,onClick:restartGame// Triggers the restartGame function when clicked\n,children:\"Reset \"})})]});};// Exports the Keyboard component\nexport default Keyboard;","map":{"version":3,"names":["React","useEffect","jsxs","_jsxs","jsx","_jsx","Keyboard","_ref","guessedLetters","onGuess","restartGame","letters","split","rows","handleKeyClick","letter","normalizedLetter","toLowerCase","includes","handleKeyPress","event","pressedKey","key","toUpperCase","window","addEventListener","removeEventListener","className","children","map","row","rowIndex","isGuessed","concat","onClick","disabled"],"sources":["C:/Users/ijanv/hangman-app/src/Keyboard.js"],"sourcesContent":["// Imports React and useEffect hook for side effects\r\nimport React, { useEffect } from 'react';\r\n\r\n// Defines the Keyboard component, which receives guessedLetters, onGuess, and restartGame as props\r\nconst Keyboard = ({ guessedLetters, onGuess, restartGame }) => {\r\n  // Defines an array of uppercase letters for the keyboard\r\n  const letters = 'QWERTYUIOPASDFGHJKLZXCVBNM'.split('');\r\n\r\n  // Defines rows based on a QWERTY keyboard layout\r\n  const rows = [\r\n    'QWERTYUIOP', // First row of keys\r\n    'ASDFGHJKL',  // Second row of keys\r\n    'ZXCVBNM',    // Third row of keys\r\n  ];\r\n\r\n  // Handles key click: Normalizes letter and triggers onGuess if the letter hasn't been guessed\r\n  const handleKeyClick = (letter) => {\r\n    const normalizedLetter = letter.toLowerCase(); // Normalizes the letter to lowercase\r\n    if (!guessedLetters.includes(normalizedLetter)) {\r\n      onGuess(normalizedLetter); // Passes the normalized letter to the onGuess function\r\n    }\r\n  };\r\n\r\n  // Handles key press event (triggered by physical keypress)\r\n  const handleKeyPress = (event) => {\r\n    const pressedKey = event.key.toUpperCase(); // Converts pressed key to uppercase\r\n    if (letters.includes(pressedKey)) {\r\n      handleKeyClick(pressedKey); // Calls handleKeyClick if the key is part of the defined letters\r\n    }\r\n  };\r\n\r\n  //Event listener for keypress\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyPress); // Adds event listener for keypress\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyPress); // Cleans up event listener on unmount\r\n    };\r\n  }, [guessedLetters]); // Adds guessedLetters as dependency to re-run effect when guessedLetters changes\r\n\r\n  return (\r\n    <div className=\"keyboard\">\r\n      {/* Maps through rows to create the layout of the keyboard */}\r\n      {rows.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"keyboard-row\">\r\n          {/* Splits each row string into individual letters */}\r\n          {row.split('').map((letter) => {\r\n            const normalizedLetter = letter.toLowerCase(); // Normalizes letter to lowercase for comparison\r\n            const isGuessed = guessedLetters.includes(normalizedLetter); // Checks if the letter is guessed\r\n            return (\r\n              <button\r\n                key={normalizedLetter} // Uses normalized letter as key for uniqueness\r\n                className={`key ${isGuessed ? 'disabled' : ''}`} // Adds 'disabled' class if the letter is guessed\r\n                onClick={() => handleKeyClick(letter)} // Handles click event for the key\r\n                disabled={isGuessed} // Disables the button if the letter has been guessed\r\n              >\r\n                {letter} {/* Displays the letter on the button */}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      ))}\r\n\r\n      {/* Special row for the reset button */}\r\n      <div className=\"keyboard-row row-special\">\r\n        <button\r\n          className=\"key key-reset\" // Applies reset key class\r\n          onClick={restartGame} // Triggers the restartGame function when clicked\r\n        >\r\n          Reset {/* Reset button text */}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Exports the Keyboard component\r\nexport default Keyboard;\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CAExC;AAAA,OAAAC,IAAA,IAAAC,KAAA,CAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,QAAQ,CAAGC,IAAA,EAA8C,IAA7C,CAAEC,cAAc,CAAEC,OAAO,CAAEC,WAAY,CAAC,CAAAH,IAAA,CACxD;AACA,KAAM,CAAAI,OAAO,CAAG,4BAA4B,CAACC,KAAK,CAAC,EAAE,CAAC,CAEtD;AACA,KAAM,CAAAC,IAAI,CAAG,CACX,YAAY,CAAE;AACd,WAAW,CAAG;AACd,SAAc;AAAA,CACf,CAED;AACA,KAAM,CAAAC,cAAc,CAAIC,MAAM,EAAK,CACjC,KAAM,CAAAC,gBAAgB,CAAGD,MAAM,CAACE,WAAW,CAAC,CAAC,CAAE;AAC/C,GAAI,CAACT,cAAc,CAACU,QAAQ,CAACF,gBAAgB,CAAC,CAAE,CAC9CP,OAAO,CAACO,gBAAgB,CAAC,CAAE;AAC7B,CACF,CAAC,CAED;AACA,KAAM,CAAAG,cAAc,CAAIC,KAAK,EAAK,CAChC,KAAM,CAAAC,UAAU,CAAGD,KAAK,CAACE,GAAG,CAACC,WAAW,CAAC,CAAC,CAAE;AAC5C,GAAIZ,OAAO,CAACO,QAAQ,CAACG,UAAU,CAAC,CAAE,CAChCP,cAAc,CAACO,UAAU,CAAC,CAAE;AAC9B,CACF,CAAC,CAED;AACApB,SAAS,CAAC,IAAM,CACduB,MAAM,CAACC,gBAAgB,CAAC,SAAS,CAAEN,cAAc,CAAC,CAAE;AACpD,MAAO,IAAM,CACXK,MAAM,CAACE,mBAAmB,CAAC,SAAS,CAAEP,cAAc,CAAC,CAAE;AACzD,CAAC,CACH,CAAC,CAAE,CAACX,cAAc,CAAC,CAAC,CAAE;AAEtB,mBACEL,KAAA,QAAKwB,SAAS,CAAC,UAAU,CAAAC,QAAA,EAEtBf,IAAI,CAACgB,GAAG,CAAC,CAACC,GAAG,CAAEC,QAAQ,gBACtB1B,IAAA,QAAoBsB,SAAS,CAAC,cAAc,CAAAC,QAAA,CAEzCE,GAAG,CAAClB,KAAK,CAAC,EAAE,CAAC,CAACiB,GAAG,CAAEd,MAAM,EAAK,CAC7B,KAAM,CAAAC,gBAAgB,CAAGD,MAAM,CAACE,WAAW,CAAC,CAAC,CAAE;AAC/C,KAAM,CAAAe,SAAS,CAAGxB,cAAc,CAACU,QAAQ,CAACF,gBAAgB,CAAC,CAAE;AAC7D,mBACEb,KAAA,WACyB;AACvBwB,SAAS,QAAAM,MAAA,CAASD,SAAS,CAAG,UAAU,CAAG,EAAE,CAAI;AAAA,CACjDE,OAAO,CAAEA,CAAA,GAAMpB,cAAc,CAACC,MAAM,CAAG;AAAA,CACvCoB,QAAQ,CAAEH,SAAW;AAAA,CAAAJ,QAAA,EAEpBb,MAAM,CAAC,GAAC,GALJC,gBAMC,CAAC,CAEb,CAAC,CAAC,EAfMe,QAgBL,CACN,CAAC,cAGF1B,IAAA,QAAKsB,SAAS,CAAC,0BAA0B,CAAAC,QAAA,cACvCvB,IAAA,WACEsB,SAAS,CAAC,eAAgB;AAAA,CAC1BO,OAAO,CAAExB,WAAa;AAAA,CAAAkB,QAAA,CACvB,QACO,CACA,CAAC,CACN,CAAC,EACH,CAAC,CAEV,CAAC,CAED;AACA,cAAe,CAAAtB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}