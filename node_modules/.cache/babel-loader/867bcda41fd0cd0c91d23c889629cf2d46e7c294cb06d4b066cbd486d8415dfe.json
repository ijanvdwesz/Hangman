{"ast":null,"code":"//Imports the Necessary components \nimport React,{useState,useEffect}from'react';/*UseState to keep track ,and useEffect to fetch the word*/import GameBoard from'./GameBoard';//The word with guessed letters\nimport Keyboard from'./Keyboard';//The clickable keyboard for user input\nimport HangmanImage from'./HangmanImage';//The hangman image based on incorrect guesses\nimport GameStatus from'./GameStatus';//The current game status (win/loss)\nimport Help from'./Help';//The help instructions\nimport'./Styles/App.css';//The stylesheet for styling\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{// State variables that manages the game status\nconst[word,setWord]=useState('');// The word to guess, initialized as an empty string\nconst[guessedLetters,setGuessedLetters]=useState([]);// Array that stores the guessed letters\nconst[incorrectGuesses,setIncorrectGuesses]=useState(0);// Tracks the number of incorrect guesses\nconst[gameStatus,setGameStatus]=useState('playing');// Tracks the game status: 'playing', 'won', 'lost'\nconst[showHelp,setShowHelp]=useState(false);// Controls the visibility of the help section\nconst maxLives=11;// Maximum allowed incorrect guesses before the game is lost\n// Fetches a random word from dictionary.txt\nconst fetchRandomWord=()=>{fetch('/dictionary.txt').then(response=>response.text())// Fetches the content of dictionary.txt\n.then(text=>{const words=text.split('\\n').map(word=>word.trim());// Splits the text into words and trims any extra spaces\nsetWord(words[Math.floor(Math.random()*words.length)]);// Sets a random word from the list\n});};// Loads a random word when the component mounts\nuseEffect(()=>{fetchRandomWord();// Initial fetch of the random word\n},[]);// Empty dependency array ensures this only runs once when the component mounts\n// Function that handles a letter guess\nconst handleGuess=letter=>{const normalizedLetter=letter.toLowerCase();// Normalizes the guessed letter to lowercase for consistency\n// Skips the guess if the letter has already been guessed or the game is not in 'playing' state\nif(guessedLetters.includes(normalizedLetter)||gameStatus!=='playing')return;// Adds the guessed letter to the list of guessed letters\nconst newGuessedLetters=[...guessedLetters,normalizedLetter];setGuessedLetters(newGuessedLetters);// Checks if the guessed letter is in the word\nif(!word.toLowerCase().includes(normalizedLetter)){const newIncorrectGuesses=incorrectGuesses+1;// Increments the incorrect guess count\nsetIncorrectGuesses(newIncorrectGuesses);// If the max number of incorrect guesses is reached, sets the game status to 'lost'\nif(newIncorrectGuesses===maxLives){setGameStatus('lost');}}else{// Checks if all letters in the word have been guessed correctly\nconst allLettersGuessed=word.toLowerCase().split('').every(char=>newGuessedLetters.includes(char.toLowerCase())// Normalizes each letter to lowercase for comparison\n);if(allLettersGuessed){setGameStatus('won');// If all letters are guessed, set the game status to 'won'\n}}};// Function that restarts the game\nconst restartGame=()=>{setGuessedLetters([]);// Resets guessed letters\nsetIncorrectGuesses(0);// Resets incorrect guesses\nsetGameStatus('playing');// Sets the game status back to 'playing'\nsetShowHelp(false);// Hides the help section upon restarting the game\nfetchRandomWord();// Fetches a new random word when restarting\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Hangman\"}),\" \",/*#__PURE__*/_jsx(HangmanImage,{incorrectGuesses:incorrectGuesses}),\" \",/*#__PURE__*/_jsx(GameBoard,{word:word,guessedLetters:guessedLetters}),\" \",/*#__PURE__*/_jsx(Keyboard,{guessedLetters:guessedLetters,onGuess:handleGuess,restartGame:restartGame}),\" \",/*#__PURE__*/_jsx(GameStatus,{gameStatus:gameStatus,restartGame:restartGame,incorrectGuesses:incorrectGuesses,maxLives:maxLives,word:word// Passes the word to GameStatus component for display\n}),/*#__PURE__*/_jsxs(\"button\",{className:\"help-button\",onClick:()=>setShowHelp(!showHelp),children:[showHelp?'Hide Help':'Show Help',\" \"]}),showHelp&&/*#__PURE__*/_jsx(Help,{}),\" \"]});};//Exports the App components\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","GameBoard","Keyboard","HangmanImage","GameStatus","Help","jsx","_jsx","jsxs","_jsxs","App","word","setWord","guessedLetters","setGuessedLetters","incorrectGuesses","setIncorrectGuesses","gameStatus","setGameStatus","showHelp","setShowHelp","maxLives","fetchRandomWord","fetch","then","response","text","words","split","map","trim","Math","floor","random","length","handleGuess","letter","normalizedLetter","toLowerCase","includes","newGuessedLetters","newIncorrectGuesses","allLettersGuessed","every","char","restartGame","className","children","onGuess","onClick"],"sources":["C:/Users/ijanv/hangman-app/src/App.js"],"sourcesContent":["//Imports the Necessary components \nimport React, { useState, useEffect } from 'react';/*UseState to keep track ,and useEffect to fetch the word*/\nimport GameBoard from './GameBoard'; //The word with guessed letters\nimport Keyboard from './Keyboard'; //The clickable keyboard for user input\nimport HangmanImage from './HangmanImage'; //The hangman image based on incorrect guesses\nimport GameStatus from './GameStatus'; //The current game status (win/loss)\nimport Help from './Help'; //The help instructions\nimport './Styles/App.css'; //The stylesheet for styling\n\nconst App = () => {\n  // State variables that manages the game status\n  const [word, setWord] = useState(''); // The word to guess, initialized as an empty string\n  const [guessedLetters, setGuessedLetters] = useState([]); // Array that stores the guessed letters\n  const [incorrectGuesses, setIncorrectGuesses] = useState(0); // Tracks the number of incorrect guesses\n  const [gameStatus, setGameStatus] = useState('playing'); // Tracks the game status: 'playing', 'won', 'lost'\n  const [showHelp, setShowHelp] = useState(false); // Controls the visibility of the help section\n\n  const maxLives = 11; // Maximum allowed incorrect guesses before the game is lost\n\n  // Fetches a random word from dictionary.txt\n  const fetchRandomWord = () => {\n    fetch('/dictionary.txt')\n      .then((response) => response.text()) // Fetches the content of dictionary.txt\n      .then((text) => {\n        const words = text.split('\\n').map((word) => word.trim()); // Splits the text into words and trims any extra spaces\n        setWord(words[Math.floor(Math.random() * words.length)]); // Sets a random word from the list\n      });\n  };\n\n  // Loads a random word when the component mounts\n  useEffect(() => {\n    fetchRandomWord(); // Initial fetch of the random word\n  }, []); // Empty dependency array ensures this only runs once when the component mounts\n\n  // Function that handles a letter guess\n  const handleGuess = (letter) => {\n    const normalizedLetter = letter.toLowerCase(); // Normalizes the guessed letter to lowercase for consistency\n  \n    // Skips the guess if the letter has already been guessed or the game is not in 'playing' state\n    if (guessedLetters.includes(normalizedLetter) || gameStatus !== 'playing') return;\n  \n    // Adds the guessed letter to the list of guessed letters\n    const newGuessedLetters = [...guessedLetters, normalizedLetter];\n    setGuessedLetters(newGuessedLetters);\n  \n    // Checks if the guessed letter is in the word\n    if (!word.toLowerCase().includes(normalizedLetter)) {\n      const newIncorrectGuesses = incorrectGuesses + 1; // Increments the incorrect guess count\n      setIncorrectGuesses(newIncorrectGuesses);\n  \n      // If the max number of incorrect guesses is reached, sets the game status to 'lost'\n      if (newIncorrectGuesses === maxLives) {\n        setGameStatus('lost');\n      }\n    } else {\n      // Checks if all letters in the word have been guessed correctly\n      const allLettersGuessed = word.toLowerCase().split('').every((char) =>\n        newGuessedLetters.includes(char.toLowerCase()) // Normalizes each letter to lowercase for comparison\n      );\n      if (allLettersGuessed) {\n        setGameStatus('won'); // If all letters are guessed, set the game status to 'won'\n      }\n    }\n  };\n\n  // Function that restarts the game\n  const restartGame = () => {\n    setGuessedLetters([]); // Resets guessed letters\n    setIncorrectGuesses(0); // Resets incorrect guesses\n    setGameStatus('playing'); // Sets the game status back to 'playing'\n    setShowHelp(false); // Hides the help section upon restarting the game\n\n    fetchRandomWord(); // Fetches a new random word when restarting\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Hangman</h1> {/* Displays the main game title */}\n      <HangmanImage incorrectGuesses={incorrectGuesses} /> {/* Displays the hangman image based on incorrect guesses */}\n      <GameBoard word={word} guessedLetters={guessedLetters} /> {/* Shows the word with guessed letters */}\n      <Keyboard guessedLetters={guessedLetters} onGuess={handleGuess} restartGame={restartGame} /> {/* Keyboard for letter guesses */}\n\n      {/* Displays game status (win/loss) and a restart button */}\n      <GameStatus\n        gameStatus={gameStatus}\n        restartGame={restartGame}\n        incorrectGuesses={incorrectGuesses}\n        maxLives={maxLives}\n        word={word} // Passes the word to GameStatus component for display\n      />\n      {/* Help button that toggles visibility of the help section */}\n      <button className=\"help-button\" onClick={() => setShowHelp(!showHelp)}>\n        {showHelp ? 'Hide Help' : 'Show Help'} {/* Toggle button text based on the current help visibility */}\n      </button>\n      {showHelp && <Help />} {/* Conditionally renders the Help component if 'showHelp' is true */}\n    </div>\n  );\n};\n//Exports the App components\nexport default App;\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,2DACnD,MAAO,CAAAC,SAAS,KAAM,aAAa,CAAE;AACrC,MAAO,CAAAC,QAAQ,KAAM,YAAY,CAAE;AACnC,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CAAE;AAC3C,MAAO,CAAAC,UAAU,KAAM,cAAc,CAAE;AACvC,MAAO,CAAAC,IAAI,KAAM,QAAQ,CAAE;AAC3B,MAAO,kBAAkB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE3B,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB;AACA,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAAE;AACtC,KAAM,CAACc,cAAc,CAAEC,iBAAiB,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CAAE;AAC1D,KAAM,CAACgB,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAE;AAC7D,KAAM,CAACkB,UAAU,CAAEC,aAAa,CAAC,CAAGnB,QAAQ,CAAC,SAAS,CAAC,CAAE;AACzD,KAAM,CAACoB,QAAQ,CAAEC,WAAW,CAAC,CAAGrB,QAAQ,CAAC,KAAK,CAAC,CAAE;AAEjD,KAAM,CAAAsB,QAAQ,CAAG,EAAE,CAAE;AAErB;AACA,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC5BC,KAAK,CAAC,iBAAiB,CAAC,CACrBC,IAAI,CAAEC,QAAQ,EAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAE;AAAA,CACpCF,IAAI,CAAEE,IAAI,EAAK,CACd,KAAM,CAAAC,KAAK,CAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAElB,IAAI,EAAKA,IAAI,CAACmB,IAAI,CAAC,CAAC,CAAC,CAAE;AAC3DlB,OAAO,CAACe,KAAK,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGN,KAAK,CAACO,MAAM,CAAC,CAAC,CAAC,CAAE;AAC5D,CAAC,CAAC,CACN,CAAC,CAED;AACAlC,SAAS,CAAC,IAAM,CACdsB,eAAe,CAAC,CAAC,CAAE;AACrB,CAAC,CAAE,EAAE,CAAC,CAAE;AAER;AACA,KAAM,CAAAa,WAAW,CAAIC,MAAM,EAAK,CAC9B,KAAM,CAAAC,gBAAgB,CAAGD,MAAM,CAACE,WAAW,CAAC,CAAC,CAAE;AAE/C;AACA,GAAIzB,cAAc,CAAC0B,QAAQ,CAACF,gBAAgB,CAAC,EAAIpB,UAAU,GAAK,SAAS,CAAE,OAE3E;AACA,KAAM,CAAAuB,iBAAiB,CAAG,CAAC,GAAG3B,cAAc,CAAEwB,gBAAgB,CAAC,CAC/DvB,iBAAiB,CAAC0B,iBAAiB,CAAC,CAEpC;AACA,GAAI,CAAC7B,IAAI,CAAC2B,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,gBAAgB,CAAC,CAAE,CAClD,KAAM,CAAAI,mBAAmB,CAAG1B,gBAAgB,CAAG,CAAC,CAAE;AAClDC,mBAAmB,CAACyB,mBAAmB,CAAC,CAExC;AACA,GAAIA,mBAAmB,GAAKpB,QAAQ,CAAE,CACpCH,aAAa,CAAC,MAAM,CAAC,CACvB,CACF,CAAC,IAAM,CACL;AACA,KAAM,CAAAwB,iBAAiB,CAAG/B,IAAI,CAAC2B,WAAW,CAAC,CAAC,CAACV,KAAK,CAAC,EAAE,CAAC,CAACe,KAAK,CAAEC,IAAI,EAChEJ,iBAAiB,CAACD,QAAQ,CAACK,IAAI,CAACN,WAAW,CAAC,CAAC,CAAE;AACjD,CAAC,CACD,GAAII,iBAAiB,CAAE,CACrBxB,aAAa,CAAC,KAAK,CAAC,CAAE;AACxB,CACF,CACF,CAAC,CAED;AACA,KAAM,CAAA2B,WAAW,CAAGA,CAAA,GAAM,CACxB/B,iBAAiB,CAAC,EAAE,CAAC,CAAE;AACvBE,mBAAmB,CAAC,CAAC,CAAC,CAAE;AACxBE,aAAa,CAAC,SAAS,CAAC,CAAE;AAC1BE,WAAW,CAAC,KAAK,CAAC,CAAE;AAEpBE,eAAe,CAAC,CAAC,CAAE;AACrB,CAAC,CAED,mBACEb,KAAA,QAAKqC,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBxC,IAAA,OAAAwC,QAAA,CAAI,SAAO,CAAI,CAAC,IAAC,cACjBxC,IAAA,CAACJ,YAAY,EAACY,gBAAgB,CAAEA,gBAAiB,CAAE,CAAC,IAAC,cACrDR,IAAA,CAACN,SAAS,EAACU,IAAI,CAAEA,IAAK,CAACE,cAAc,CAAEA,cAAe,CAAE,CAAC,IAAC,cAC1DN,IAAA,CAACL,QAAQ,EAACW,cAAc,CAAEA,cAAe,CAACmC,OAAO,CAAEb,WAAY,CAACU,WAAW,CAAEA,WAAY,CAAE,CAAC,IAAC,cAG7FtC,IAAA,CAACH,UAAU,EACTa,UAAU,CAAEA,UAAW,CACvB4B,WAAW,CAAEA,WAAY,CACzB9B,gBAAgB,CAAEA,gBAAiB,CACnCM,QAAQ,CAAEA,QAAS,CACnBV,IAAI,CAAEA,IAAM;AAAA,CACb,CAAC,cAEFF,KAAA,WAAQqC,SAAS,CAAC,aAAa,CAACG,OAAO,CAAEA,CAAA,GAAM7B,WAAW,CAAC,CAACD,QAAQ,CAAE,CAAA4B,QAAA,EACnE5B,QAAQ,CAAG,WAAW,CAAG,WAAW,CAAC,GAAC,EACjC,CAAC,CACRA,QAAQ,eAAIZ,IAAA,CAACF,IAAI,GAAE,CAAC,CAAC,GAAC,EACpB,CAAC,CAEV,CAAC,CACD;AACA,cAAe,CAAAK,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}