{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ijanv\\\\hangman-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport GameBoard from './GameBoard';\nimport Keyboard from './Keyboard';\nimport HangmanImage from './HangmanImage';\nimport GameStatus from './GameStatus';\nimport Help from './Help';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [word, setWord] = useState(''); // Word to guess\n  const [guessedLetters, setGuessedLetters] = useState([]); // Letters guessed\n  const [incorrectGuesses, setIncorrectGuesses] = useState(0); // Incorrect guesses\n  const [gameStatus, setGameStatus] = useState('playing'); // 'playing', 'won', 'lost'\n  const [showHelp, setShowHelp] = useState(false);\n  const maxLives = 11;\n\n  // Load a random word from dictionary.txt\n  useEffect(() => {\n    fetch('/dictionary.txt').then(response => response.text()).then(text => {\n      const words = text.split('\\n').map(word => word.trim());\n      setWord(words[Math.floor(Math.random() * words.length)]);\n    });\n  }, []);\n  const handleGuess = letter => {\n    // Avoid guessing the same letter or if the game is over\n    if (guessedLetters.includes(letter) || gameStatus !== 'playing') return;\n\n    // Add guessed letter to the guessedLetters array\n    setGuessedLetters(prevGuessedLetters => {\n      const newGuessedLetters = [...prevGuessedLetters, letter];\n      return newGuessedLetters;\n    });\n\n    // If the letter is not in the word, increase incorrect guesses\n    if (!word.includes(letter)) {\n      const newIncorrectGuesses = incorrectGuesses + 1;\n      setIncorrectGuesses(newIncorrectGuesses);\n\n      // Check if game is lost\n      if (newIncorrectGuesses === maxLives) {\n        setGameStatus('lost');\n      }\n    } else {\n      // Check if all letters have been guessed\n      const allLettersGuessed = word.split('').every(char => newGuessedLetters.includes(char) || char === letter);\n      if (allLettersGuessed) {\n        setGameStatus('won');\n      }\n    }\n  };\n\n  // Restart game\n  const restartGame = () => {\n    setGuessedLetters([]);\n    setIncorrectGuesses(0);\n    setGameStatus('playing');\n    setShowHelp(false);\n    fetch('/dictionary.txt').then(response => response.text()).then(text => {\n      const words = text.split('\\n').map(word => word.trim());\n      setWord(words[Math.floor(Math.random() * words.length)]);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hangman\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HangmanImage, {\n      incorrectGuesses: incorrectGuesses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      word: word,\n      guessedLetters: guessedLetters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      guessedLetters: guessedLetters,\n      onGuess: handleGuess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameStatus, {\n      gameStatus: gameStatus,\n      restartGame: restartGame,\n      incorrectGuesses: incorrectGuesses,\n      maxLives: maxLives,\n      word: word // Pass the word to GameStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"help-button\",\n      onClick: () => setShowHelp(!showHelp),\n      children: showHelp ? 'Hide Help' : 'Show Help'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), showHelp && /*#__PURE__*/_jsxDEV(Help, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Qwfe3HmHZ9xcj98rufmJeV6STZE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameBoard","Keyboard","HangmanImage","GameStatus","Help","jsxDEV","_jsxDEV","App","_s","word","setWord","guessedLetters","setGuessedLetters","incorrectGuesses","setIncorrectGuesses","gameStatus","setGameStatus","showHelp","setShowHelp","maxLives","fetch","then","response","text","words","split","map","trim","Math","floor","random","length","handleGuess","letter","includes","prevGuessedLetters","newGuessedLetters","newIncorrectGuesses","allLettersGuessed","every","char","restartGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onGuess","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ijanv/hangman-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GameBoard from './GameBoard';\nimport Keyboard from './Keyboard';\nimport HangmanImage from './HangmanImage';\nimport GameStatus from './GameStatus';\nimport Help from './Help';\nimport './App.css';\n\nconst App = () => {\n  const [word, setWord] = useState(''); // Word to guess\n  const [guessedLetters, setGuessedLetters] = useState([]); // Letters guessed\n  const [incorrectGuesses, setIncorrectGuesses] = useState(0); // Incorrect guesses\n  const [gameStatus, setGameStatus] = useState('playing'); // 'playing', 'won', 'lost'\n  const [showHelp, setShowHelp] = useState(false);\n\n  const maxLives = 11;\n\n  // Load a random word from dictionary.txt\n  useEffect(() => {\n    fetch('/dictionary.txt')\n      .then((response) => response.text())\n      .then((text) => {\n        const words = text.split('\\n').map((word) => word.trim());\n        setWord(words[Math.floor(Math.random() * words.length)]);\n      });\n  }, []);\n\n  const handleGuess = (letter) => {\n    // Avoid guessing the same letter or if the game is over\n    if (guessedLetters.includes(letter) || gameStatus !== 'playing') return;\n  \n    // Add guessed letter to the guessedLetters array\n    setGuessedLetters((prevGuessedLetters) => {\n      const newGuessedLetters = [...prevGuessedLetters, letter];\n      return newGuessedLetters;\n    });\n  \n    // If the letter is not in the word, increase incorrect guesses\n    if (!word.includes(letter)) {\n      const newIncorrectGuesses = incorrectGuesses + 1;\n      setIncorrectGuesses(newIncorrectGuesses);\n  \n      // Check if game is lost\n      if (newIncorrectGuesses === maxLives) {\n        setGameStatus('lost');\n      }\n    } else {\n      // Check if all letters have been guessed\n      const allLettersGuessed = word\n        .split('')\n        .every((char) => newGuessedLetters.includes(char) || char === letter);\n  \n      if (allLettersGuessed) {\n        setGameStatus('won');\n      }\n    }\n  };\n  \n  // Restart game\n  const restartGame = () => {\n    setGuessedLetters([]);\n    setIncorrectGuesses(0);\n    setGameStatus('playing');\n    setShowHelp(false);\n\n    fetch('/dictionary.txt')\n      .then((response) => response.text())\n      .then((text) => {\n        const words = text.split('\\n').map((word) => word.trim());\n        setWord(words[Math.floor(Math.random() * words.length)]);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Hangman</h1>\n      <HangmanImage incorrectGuesses={incorrectGuesses} />\n      <GameBoard word={word} guessedLetters={guessedLetters} />\n      <Keyboard guessedLetters={guessedLetters} onGuess={handleGuess} />\n      <GameStatus\n        gameStatus={gameStatus}\n        restartGame={restartGame}\n        incorrectGuesses={incorrectGuesses}\n        maxLives={maxLives}\n        word={word} // Pass the word to GameStatus\n      />\n      <button className=\"help-button\" onClick={() => setShowHelp(!showHelp)}>\n        {showHelp ? 'Hide Help' : 'Show Help'}\n      </button>\n      {showHelp && <Help />}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}