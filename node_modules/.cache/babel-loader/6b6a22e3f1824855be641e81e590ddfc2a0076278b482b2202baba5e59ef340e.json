{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ijanv\\\\hangman-app\\\\src\\\\Keyboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Keyboard = ({\n  guessedLetters,\n  onGuess,\n  restartGame\n}) => {\n  _s();\n  const letters = 'QWERTYUIOPASDFGHJKLZXCVBNM'.split('');\n\n  // Define rows based on a QWERTY layout\n  const rows = ['QWERTYUIOP', 'ASDFGHJKL', 'ZXCVBNM'];\n  const handleKeyClick = letter => {\n    const normalizedLetter = letter.toLowerCase(); // Normalize the letter to lowercase\n    if (!guessedLetters.includes(normalizedLetter)) {\n      onGuess(normalizedLetter); // Pass the normalized letter to the onGuess function\n    }\n  };\n  const handleKeyPress = event => {\n    const pressedKey = event.key.toUpperCase(); // Convert pressed key to uppercase\n    if (letters.includes(pressedKey)) {\n      handleKeyClick(pressedKey);\n    }\n  };\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [guessedLetters]); // Add guessedLetters as dependency\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"keyboard\",\n    children: [rows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard-row\",\n      children: row.split('').map(letter => {\n        const normalizedLetter = letter.toLowerCase(); // Normalize letter to lowercase for comparison\n        const isGuessed = guessedLetters.includes(normalizedLetter);\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `key ${isGuessed ? 'disabled' : ''}`,\n          onClick: () => handleKeyClick(letter),\n          disabled: isGuessed // Disable the key if it's already guessed\n          ,\n          children: letter\n        }, normalizedLetter, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard-row row-special\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"key key-reset\",\n        onClick: restartGame // Trigger the restartGame function\n        ,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Keyboard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Keyboard;\nexport default Keyboard;\nvar _c;\n$RefreshReg$(_c, \"Keyboard\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Keyboard","guessedLetters","onGuess","restartGame","_s","letters","split","rows","handleKeyClick","letter","normalizedLetter","toLowerCase","includes","handleKeyPress","event","pressedKey","key","toUpperCase","window","addEventListener","removeEventListener","className","children","map","row","rowIndex","isGuessed","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ijanv/hangman-app/src/Keyboard.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nconst Keyboard = ({ guessedLetters, onGuess, restartGame }) => {\r\n  const letters = 'QWERTYUIOPASDFGHJKLZXCVBNM'.split('');\r\n\r\n  // Define rows based on a QWERTY layout\r\n  const rows = [\r\n    'QWERTYUIOP',\r\n    'ASDFGHJKL',\r\n    'ZXCVBNM',\r\n  ];\r\n\r\n  const handleKeyClick = (letter) => {\r\n    const normalizedLetter = letter.toLowerCase(); // Normalize the letter to lowercase\r\n    if (!guessedLetters.includes(normalizedLetter)) {\r\n      onGuess(normalizedLetter); // Pass the normalized letter to the onGuess function\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (event) => {\r\n    const pressedKey = event.key.toUpperCase(); // Convert pressed key to uppercase\r\n    if (letters.includes(pressedKey)) {\r\n      handleKeyClick(pressedKey);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyPress);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyPress);\r\n    };\r\n  }, [guessedLetters]); // Add guessedLetters as dependency\r\n\r\n  return (\r\n    <div className=\"keyboard\">\r\n      {rows.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"keyboard-row\">\r\n          {row.split('').map((letter) => {\r\n            const normalizedLetter = letter.toLowerCase(); // Normalize letter to lowercase for comparison\r\n            const isGuessed = guessedLetters.includes(normalizedLetter);\r\n            return (\r\n              <button\r\n                key={normalizedLetter}\r\n                className={`key ${isGuessed ? 'disabled' : ''}`}\r\n                onClick={() => handleKeyClick(letter)}\r\n                disabled={isGuessed} // Disable the key if it's already guessed\r\n              >\r\n                {letter}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      ))}\r\n      {/* Reset Button */}\r\n      <div className=\"keyboard-row row-special\">\r\n        <button\r\n          className=\"key key-reset\"\r\n          onClick={restartGame} // Trigger the restartGame function\r\n        >\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Keyboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,cAAc;EAAEC,OAAO;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC7D,MAAMC,OAAO,GAAG,4BAA4B,CAACC,KAAK,CAAC,EAAE,CAAC;;EAEtD;EACA,MAAMC,IAAI,GAAG,CACX,YAAY,EACZ,WAAW,EACX,SAAS,CACV;EAED,MAAMC,cAAc,GAAIC,MAAM,IAAK;IACjC,MAAMC,gBAAgB,GAAGD,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC,CAAC;IAC/C,IAAI,CAACV,cAAc,CAACW,QAAQ,CAACF,gBAAgB,CAAC,EAAE;MAC9CR,OAAO,CAACQ,gBAAgB,CAAC,CAAC,CAAC;IAC7B;EACF,CAAC;EAED,MAAMG,cAAc,GAAIC,KAAK,IAAK;IAChC,MAAMC,UAAU,GAAGD,KAAK,CAACE,GAAG,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC;IAC5C,IAAIZ,OAAO,CAACO,QAAQ,CAACG,UAAU,CAAC,EAAE;MAChCP,cAAc,CAACO,UAAU,CAAC;IAC5B;EACF,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACdqB,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEN,cAAc,CAAC;IAClD,OAAO,MAAM;MACXK,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEP,cAAc,CAAC;IACvD,CAAC;EACH,CAAC,EAAE,CAACZ,cAAc,CAAC,CAAC,CAAC,CAAC;;EAEtB,oBACEF,OAAA;IAAKsB,SAAS,EAAC,UAAU;IAAAC,QAAA,GACtBf,IAAI,CAACgB,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,kBACtB1B,OAAA;MAAoBsB,SAAS,EAAC,cAAc;MAAAC,QAAA,EACzCE,GAAG,CAAClB,KAAK,CAAC,EAAE,CAAC,CAACiB,GAAG,CAAEd,MAAM,IAAK;QAC7B,MAAMC,gBAAgB,GAAGD,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC,CAAC;QAC/C,MAAMe,SAAS,GAAGzB,cAAc,CAACW,QAAQ,CAACF,gBAAgB,CAAC;QAC3D,oBACEX,OAAA;UAEEsB,SAAS,EAAE,OAAOK,SAAS,GAAG,UAAU,GAAG,EAAE,EAAG;UAChDC,OAAO,EAAEA,CAAA,KAAMnB,cAAc,CAACC,MAAM,CAAE;UACtCmB,QAAQ,EAAEF,SAAU,CAAC;UAAA;UAAAJ,QAAA,EAEpBb;QAAM,GALFC,gBAAgB;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMf,CAAC;MAEb,CAAC;IAAC,GAdMP,QAAQ;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAeb,CACN,CAAC,eAEFjC,OAAA;MAAKsB,SAAS,EAAC,0BAA0B;MAAAC,QAAA,eACvCvB,OAAA;QACEsB,SAAS,EAAC,eAAe;QACzBM,OAAO,EAAExB,WAAY,CAAC;QAAA;QAAAmB,QAAA,EACvB;MAED;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5B,EAAA,CA9DIJ,QAAQ;AAAAiC,EAAA,GAARjC,QAAQ;AAgEd,eAAeA,QAAQ;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}